// ──────────────────────────────────────────────────────────────
//  prisma/schema.prisma
// ──────────────────────────────────────────────────────────────
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ─────────── ENUMS ───────────
 */

enum Role {
  CUSTOMER
  STAFF
  ADMIN
}

enum TicketStatus {
  OPEN
  SCHEDULED
  IN_REPAIR
  COMPLETED
  CLOSED
}

enum JobStatus {
  TODO
  INPROGRESS
  DONE
}

/**
 * ─────────── MODELS ───────────
 */

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String
  role     Role   @default(CUSTOMER)

  // relations
  tickets      Ticket[] @relation("UserTickets")
  posts        Post[]   @relation("UserPosts")
  assignedJobs Job[]    @relation("UserAssignedJobs")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ticket {
  id            String       @id @default(uuid())
  device        String
  issue         String
  status        TicketStatus @default(OPEN)
  preferredDate DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // many‑to‑one: customer
  customer   User   @relation("UserTickets", fields: [customerId], references: [id])
  customerId String

  // one‑to‑one (optional)
  quote Quote?
  job   Job?
}

model Quote {
  id         String   @id @default(uuid())
  labourCost Float
  partsCost  Float
  total      Float
  createdAt  DateTime @default(now())

  ticket   Ticket @relation(fields: [ticketId], references: [id])
  ticketId String @unique
}

model Job {
  id          String    @id @default(uuid())
  title       String
  status      JobStatus @default(TODO)
  scheduledAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  /// optional one‑to‑one link back to Ticket
  ticket   Ticket? @relation(fields: [ticketId], references: [id])
  ticketId String? @unique // <-- add @unique here ✅

  /// optional staff assignment
  assignedTo   User?   @relation("UserAssignedJobs", fields: [assignedToId], references: [id])
  assignedToId String?
}

model SparePart {
  id        String   @id @default(uuid())
  name      String
  stock     Int      @default(0)
  cost      Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String   @id @default(uuid())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation("UserPosts", fields: [authorId], references: [id])
  authorId String
}
